/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package sg.com.para.intranet.expense.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import sg.com.para.intranet.expense.services.model.Expense;
import sg.com.para.intranet.expense.services.model.ExpenseModel;
import sg.com.para.intranet.expense.services.model.ExpenseSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Expense service. Represents a row in the &quot;intranet_expense&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link sg.com.para.intranet.expense.services.model.ExpenseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExpenseImpl}.
 * </p>
 *
 * @author Fernando Karnagi
 * @see ExpenseImpl
 * @see sg.com.para.intranet.expense.services.model.Expense
 * @see sg.com.para.intranet.expense.services.model.ExpenseModel
 * @generated
 */
@JSON(strict = true)
public class ExpenseModelImpl extends BaseModelImpl<Expense>
	implements ExpenseModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a expense model instance should use the {@link sg.com.para.intranet.expense.services.model.Expense} interface instead.
	 */
	public static final String TABLE_NAME = "intranet_expense";
	public static final Object[][] TABLE_COLUMNS = {
			{ "expenseId", Types.INTEGER },
			{ "employeeScreenName", Types.VARCHAR },
			{ "logDate", Types.TIMESTAMP },
			{ "amount", Types.DOUBLE },
			{ "remarks", Types.VARCHAR },
			{ "status", Types.VARCHAR },
			{ "projectCode", Types.VARCHAR },
			{ "approvedBy", Types.VARCHAR },
			{ "approvedDate", Types.TIMESTAMP },
			{ "processedBy", Types.VARCHAR },
			{ "processedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table intranet_expense (expenseId INTEGER not null primary key,employeeScreenName VARCHAR(75) null,logDate DATE null,amount DOUBLE,remarks VARCHAR(75) null,status VARCHAR(75) null,projectCode VARCHAR(75) null,approvedBy VARCHAR(75) null,approvedDate DATE null,processedBy VARCHAR(75) null,processedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table intranet_expense";
	public static final String ORDER_BY_JPQL = " ORDER BY expense.expenseId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY intranet_expense.expenseId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.sg.com.para.intranet.expense.services.model.Expense"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.sg.com.para.intranet.expense.services.model.Expense"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Expense toModel(ExpenseSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Expense model = new ExpenseImpl();

		model.setExpenseId(soapModel.getExpenseId());
		model.setEmployeeScreenName(soapModel.getEmployeeScreenName());
		model.setLogDate(soapModel.getLogDate());
		model.setAmount(soapModel.getAmount());
		model.setRemarks(soapModel.getRemarks());
		model.setStatus(soapModel.getStatus());
		model.setProjectCode(soapModel.getProjectCode());
		model.setApprovedBy(soapModel.getApprovedBy());
		model.setApprovedDate(soapModel.getApprovedDate());
		model.setProcessedBy(soapModel.getProcessedBy());
		model.setProcessedDate(soapModel.getProcessedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Expense> toModels(ExpenseSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Expense> models = new ArrayList<Expense>(soapModels.length);

		for (ExpenseSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.sg.com.para.intranet.expense.services.model.Expense"));

	public ExpenseModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _expenseId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setExpenseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _expenseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Expense.class;
	}

	@Override
	public String getModelClassName() {
		return Expense.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("expenseId", getExpenseId());
		attributes.put("employeeScreenName", getEmployeeScreenName());
		attributes.put("logDate", getLogDate());
		attributes.put("amount", getAmount());
		attributes.put("remarks", getRemarks());
		attributes.put("status", getStatus());
		attributes.put("projectCode", getProjectCode());
		attributes.put("approvedBy", getApprovedBy());
		attributes.put("approvedDate", getApprovedDate());
		attributes.put("processedBy", getProcessedBy());
		attributes.put("processedDate", getProcessedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer expenseId = (Integer)attributes.get("expenseId");

		if (expenseId != null) {
			setExpenseId(expenseId);
		}

		String employeeScreenName = (String)attributes.get("employeeScreenName");

		if (employeeScreenName != null) {
			setEmployeeScreenName(employeeScreenName);
		}

		Date logDate = (Date)attributes.get("logDate");

		if (logDate != null) {
			setLogDate(logDate);
		}

		Double amount = (Double)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		String remarks = (String)attributes.get("remarks");

		if (remarks != null) {
			setRemarks(remarks);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String projectCode = (String)attributes.get("projectCode");

		if (projectCode != null) {
			setProjectCode(projectCode);
		}

		String approvedBy = (String)attributes.get("approvedBy");

		if (approvedBy != null) {
			setApprovedBy(approvedBy);
		}

		Date approvedDate = (Date)attributes.get("approvedDate");

		if (approvedDate != null) {
			setApprovedDate(approvedDate);
		}

		String processedBy = (String)attributes.get("processedBy");

		if (processedBy != null) {
			setProcessedBy(processedBy);
		}

		Date processedDate = (Date)attributes.get("processedDate");

		if (processedDate != null) {
			setProcessedDate(processedDate);
		}
	}

	@JSON
	@Override
	public int getExpenseId() {
		return _expenseId;
	}

	@Override
	public void setExpenseId(int expenseId) {
		_expenseId = expenseId;
	}

	@JSON
	@Override
	public String getEmployeeScreenName() {
		if (_employeeScreenName == null) {
			return StringPool.BLANK;
		}
		else {
			return _employeeScreenName;
		}
	}

	@Override
	public void setEmployeeScreenName(String employeeScreenName) {
		_employeeScreenName = employeeScreenName;
	}

	@JSON
	@Override
	public Date getLogDate() {
		return _logDate;
	}

	@Override
	public void setLogDate(Date logDate) {
		_logDate = logDate;
	}

	@JSON
	@Override
	public double getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(double amount) {
		_amount = amount;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@JSON
	@Override
	public String getProjectCode() {
		if (_projectCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _projectCode;
		}
	}

	@Override
	public void setProjectCode(String projectCode) {
		_projectCode = projectCode;
	}

	@JSON
	@Override
	public String getApprovedBy() {
		if (_approvedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _approvedBy;
		}
	}

	@Override
	public void setApprovedBy(String approvedBy) {
		_approvedBy = approvedBy;
	}

	@JSON
	@Override
	public Date getApprovedDate() {
		return _approvedDate;
	}

	@Override
	public void setApprovedDate(Date approvedDate) {
		_approvedDate = approvedDate;
	}

	@JSON
	@Override
	public String getProcessedBy() {
		if (_processedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _processedBy;
		}
	}

	@Override
	public void setProcessedBy(String processedBy) {
		_processedBy = processedBy;
	}

	@JSON
	@Override
	public Date getProcessedDate() {
		return _processedDate;
	}

	@Override
	public void setProcessedDate(Date processedDate) {
		_processedDate = processedDate;
	}

	@Override
	public Expense toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Expense)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExpenseImpl expenseImpl = new ExpenseImpl();

		expenseImpl.setExpenseId(getExpenseId());
		expenseImpl.setEmployeeScreenName(getEmployeeScreenName());
		expenseImpl.setLogDate(getLogDate());
		expenseImpl.setAmount(getAmount());
		expenseImpl.setRemarks(getRemarks());
		expenseImpl.setStatus(getStatus());
		expenseImpl.setProjectCode(getProjectCode());
		expenseImpl.setApprovedBy(getApprovedBy());
		expenseImpl.setApprovedDate(getApprovedDate());
		expenseImpl.setProcessedBy(getProcessedBy());
		expenseImpl.setProcessedDate(getProcessedDate());

		expenseImpl.resetOriginalValues();

		return expenseImpl;
	}

	@Override
	public int compareTo(Expense expense) {
		int primaryKey = expense.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Expense)) {
			return false;
		}

		Expense expense = (Expense)obj;

		int primaryKey = expense.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Expense> toCacheModel() {
		ExpenseCacheModel expenseCacheModel = new ExpenseCacheModel();

		expenseCacheModel.expenseId = getExpenseId();

		expenseCacheModel.employeeScreenName = getEmployeeScreenName();

		String employeeScreenName = expenseCacheModel.employeeScreenName;

		if ((employeeScreenName != null) && (employeeScreenName.length() == 0)) {
			expenseCacheModel.employeeScreenName = null;
		}

		Date logDate = getLogDate();

		if (logDate != null) {
			expenseCacheModel.logDate = logDate.getTime();
		}
		else {
			expenseCacheModel.logDate = Long.MIN_VALUE;
		}

		expenseCacheModel.amount = getAmount();

		expenseCacheModel.remarks = getRemarks();

		String remarks = expenseCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			expenseCacheModel.remarks = null;
		}

		expenseCacheModel.status = getStatus();

		String status = expenseCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			expenseCacheModel.status = null;
		}

		expenseCacheModel.projectCode = getProjectCode();

		String projectCode = expenseCacheModel.projectCode;

		if ((projectCode != null) && (projectCode.length() == 0)) {
			expenseCacheModel.projectCode = null;
		}

		expenseCacheModel.approvedBy = getApprovedBy();

		String approvedBy = expenseCacheModel.approvedBy;

		if ((approvedBy != null) && (approvedBy.length() == 0)) {
			expenseCacheModel.approvedBy = null;
		}

		Date approvedDate = getApprovedDate();

		if (approvedDate != null) {
			expenseCacheModel.approvedDate = approvedDate.getTime();
		}
		else {
			expenseCacheModel.approvedDate = Long.MIN_VALUE;
		}

		expenseCacheModel.processedBy = getProcessedBy();

		String processedBy = expenseCacheModel.processedBy;

		if ((processedBy != null) && (processedBy.length() == 0)) {
			expenseCacheModel.processedBy = null;
		}

		Date processedDate = getProcessedDate();

		if (processedDate != null) {
			expenseCacheModel.processedDate = processedDate.getTime();
		}
		else {
			expenseCacheModel.processedDate = Long.MIN_VALUE;
		}

		return expenseCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{expenseId=");
		sb.append(getExpenseId());
		sb.append(", employeeScreenName=");
		sb.append(getEmployeeScreenName());
		sb.append(", logDate=");
		sb.append(getLogDate());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", projectCode=");
		sb.append(getProjectCode());
		sb.append(", approvedBy=");
		sb.append(getApprovedBy());
		sb.append(", approvedDate=");
		sb.append(getApprovedDate());
		sb.append(", processedBy=");
		sb.append(getProcessedBy());
		sb.append(", processedDate=");
		sb.append(getProcessedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("sg.com.para.intranet.expense.services.model.Expense");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>expenseId</column-name><column-value><![CDATA[");
		sb.append(getExpenseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeScreenName</column-name><column-value><![CDATA[");
		sb.append(getEmployeeScreenName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logDate</column-name><column-value><![CDATA[");
		sb.append(getLogDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectCode</column-name><column-value><![CDATA[");
		sb.append(getProjectCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvedBy</column-name><column-value><![CDATA[");
		sb.append(getApprovedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvedDate</column-name><column-value><![CDATA[");
		sb.append(getApprovedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processedBy</column-name><column-value><![CDATA[");
		sb.append(getProcessedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processedDate</column-name><column-value><![CDATA[");
		sb.append(getProcessedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Expense.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Expense.class
		};
	private int _expenseId;
	private String _employeeScreenName;
	private Date _logDate;
	private double _amount;
	private String _remarks;
	private String _status;
	private String _projectCode;
	private String _approvedBy;
	private Date _approvedDate;
	private String _processedBy;
	private Date _processedDate;
	private Expense _escapedModel;
}